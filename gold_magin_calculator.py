# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gglQf4pykWKLUulTBO5blesO0IaB84UH
"""

import streamlit as st

st.title("Gold Margin Trade Calculator")

st.sidebar.header("Input Parameters")

# Inputs
deposit = st.sidebar.number_input("Deposit Amount ($)", min_value=0.0, value=3000.0)
bonus_percent = st.sidebar.slider("Bonus Percentage (%)", 0, 100, 30)
leverage = st.sidebar.number_input("Leverage (e.g., 100 for 1:100)", min_value=1, value=100)
gold_price = st.sidebar.number_input("Gold Price per Ounce ($)", min_value=0.0, value=3175.0)
margin_call_level = st.sidebar.slider("Margin Call Level (%)", 0, 100, 50)

# Calculations
bonus = deposit * (bonus_percent / 100)
total_balance = deposit + bonus
trading_funds = total_balance * 0.20
buying_power = trading_funds * leverage
ounces = buying_power / gold_price
used_margin = buying_power / leverage
free_margin = total_balance - used_margin
margin_level = (total_balance / used_margin) * 100

equity_at_liquidation = used_margin * (margin_call_level / 100)
pl_needed = equity_at_liquidation - total_balance
per_dollar_move = ounces * 1
price_drop_needed = abs(pl_needed) / per_dollar_move
liquidation_price = gold_price - price_drop_needed

# Results
st.subheader("Results")

st.write(f"*Bonus:* ${bonus:,.2f}")
st.write(f"*Total Balance:* ${total_balance:,.2f}")
st.write(f"*Trading Funds (20%):* ${trading_funds:,.2f}")
st.write(f"*Buying Power:* ${buying_power:,.2f}")
st.write(f"*Ounces Traded:* {ounces:,.4f} oz")
st.write(f"*Used Margin:* ${used_margin:,.2f}")
st.write(f"*Free Margin:* ${free_margin:,.2f}")
st.write(f"*Margin Level:* {margin_level:,.2f}%")
st.write(f"*P/L Needed for {margin_call_level}% Margin Call:* ${pl_needed:,.2f}")
st.write(f"*Price Drop Needed for Liquidation:* ${price_drop_needed:,.2f}")
st.write(f"*Liquidation Price Level:* ${liquidation_price:,.2f}")

# Optional: Add a P/L move simulator
st.subheader("Quick P/L Move Simulator")

price_move = st.number_input("Price move in $ (up/down)", value=10)
pl_change = ounces * price_move
st.write(f"*P/L for ${price_move} move:* ${pl_change:,.2f}")